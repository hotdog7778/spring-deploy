###### 톰캣 클러스터링 주요점
# HTTP 커넥터 포트 (기본: 8080)
# AJP 커넥터 포트 (기본: 8009)
# Shutdown 포트 (기본: 8005)
  # 클러스터링 멀티캐스트 포트 address="228.0.0.4" port="45564" [일반적으로 로컬 네트워크에서 사용되는 멀티캐스트 IP 대역(224.0.0.0 ~ 239.255.255.255)에 속합니다.]
# Receiver 포트 port="4000"
  # Tomcat 인스턴스는 자신의 Receiver 포트를 통해 세션 복제 및 클러스터 메시지를 수신



# Tomcat 클러스터링 요약 정보
# ----------------------------------------------------------------------
# 서비스명   | 고정 IP             | HTTP 포트 (호스트:컨테이너) | 클러스터링 포트
# ----------------------------------------------------------------------
# nginx      | 자동 할당          | 8010:8010              | -
# tomcat1    | 172.20.0.101     | 8081:8080              | 4000 (자신의 Receiver포트), 4000(tomcat2의 수신포트를 설정했음) ..기본값임
# tomcat2    | 172.20.0.102     | 8082:8080              | 4000 (자신의 Receiver포트), 4000(tomcat1의 수신포트를 설정했음) ..기본값임
# mysql      | 자동 할당          | 3306:3306              | -
# redis      | 자동 할당          | 6379:6379              | -
#
# jenkins    | 자동 할당          | 8085:8080
# ----------------------------------------------------------------------

services:
  # Nginx 로드밸런서 설정
  nginx:
    image: nginx:latest
    platform: linux/arm64
    ports:
      - "8010:8010"
    volumes:
      - ./conf/nginx/nginx.conf:/etc/nginx/nginx.conf  # Nginx 설정 파일 마운트
    networks:
      - app-network

  # Tomcat 1 서버 설정
  #tomcat1: &was
  tomcat1:
    image: tomcat:9.0
    platform: linux/arm64
    environment:
      - CATALINA_OPTS=-DjvmRoute=tomcat1 -Dspring.redis.host=redis -Dspring.datasource.url=jdbc:mysql://mysql:3306/testdb
    ports:
      - "8081:8080"  # 호스트 포트 매핑 (옵션)
      - "8005:8005"
    networks:
      app-network:
        ipv4_address: 172.20.0.101
    volumes:
      - ./tomcat1/conf/server.xml:/usr/local/tomcat/conf/server.xml  # Tomcat1의 클러스터링 설정
      - ./tomcat1/logs:/usr/local/tomcat/logs  # Tomcat1의 로그 폴더
      #- ./target/ROOT-1.0-SNAPSHOT.war:/usr/local/tomcat/webapps/ROOT.war
      - ./tomcat1/webapp/ROOT.war:/usr/local/tomcat/webapps/ROOT.war # 배포 테스트용

  # Tomcat 2 서버 설정
  tomcat2:
#    <<: *was
    image: tomcat:9.0
    platform: linux/arm64
    environment:
      - CATALINA_OPTS=-DjvmRoute=tomcat2 -Dspring.redis.host=redis -Dspring.datasource.url=jdbc:mysql://mysql:3306/testdb
    ports:
      - "8082:8080"  # 호스트 포트 매핑 (옵션)
      - "8006:8005"
    networks:
      app-network:
        ipv4_address: 172.20.0.102
    volumes:
      - ./tomcat2/conf/server.xml:/usr/local/tomcat/conf/server.xml  # Tomcat2의 클러스터링 설정
      - ./tomcat2/logs:/usr/local/tomcat/logs  # Tomcat2의 로그 폴더
      - ./target/ROOT-1.0-SNAPSHOT.war:/usr/local/tomcat/webapps/ROOT.war

  # MySQL 데이터베이스 설정 (최신 버전 및 ARM64 설정 추가)
  mysql:
    image: mysql:8.0
    platform: linux/arm64
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: testdb
      MYSQL_USER: testuser
      MYSQL_PASSWORD: testpassword
    ports:
      - "3306:3306"
    networks:
      - app-network
    volumes:
      - mysql_data:/var/lib/mysql

  # Redis 세션 저장소 설정
  redis:
    image: redis:latest
    platform: linux/arm64
    ports:
      - "6379:6379"
    networks:
      - app-network

  jenkins:
    #image: jenkins/jenkins:lts
    image: custom-jenkins
    platform: linux/arm64
    user: root
    #environment:
      #JAVA_OPTS: "-Djenkins.install.runSetupWizard=false" #플러그인설치 스킵
    ports:
      - "8085:8080"  # Jenkins 웹 인터페이스 포트
      - "50000:50000"  # Jenkins 에이전트 포트
    networks:
      - app-network
    volumes:
      - ./data/jenkins/jenkins_home:/var/jenkins_home  # Jenkins 데이터 저장
      - /var/run/docker.sock:/var/run/docker.sock  # 젠킨스에서 도커작업이 필요할경우
#    extra_hosts:
#      - "host.docker.internal:172.20.0.1"  # 호스트 IP 매핑

networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16  # 고정 IP 사용을 위한 서브넷 설정

#익명 볼륨을 생성할 때 사용되며, Docker가 자동으로 볼륨을 생성하여 사용
volumes:
  mysql_data:


#docker network rm tomcat-zerodowntimepipeline_app-network
#docker compose -f /path/to/docker-compose.yml down --volumes